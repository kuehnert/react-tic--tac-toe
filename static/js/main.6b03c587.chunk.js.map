{"version":3,"sources":["utils/playerLabel.js","utils/backgroundColor.js","components/FadeTransition.jsx","components/Tile.jsx","components/GameGrid.jsx","components/Header.jsx","components/Message.jsx","components/WinningModal.jsx","components/App.jsx","index.js"],"names":["playerLabel","value","backgroundColor","FadeTransition","props","CSSTransition","classNames","timeout","addEndListener","node","done","addEventListener","Tile","index","SwitchTransition","key","className","onClick","handleClick","GameGrid","tiles","map","t","i","Header","title","Message","currentPlayer","text","WinningModal","gameState","handleNewGame","message","isOpen","onRequestClose","contentLabel","closeTimeoutMS","ariaHideApp","App","defaultState","JSON","stringify","Array","fill","winningCombination","moveCounter","state","parse","winningCombinations","setState","hasWon","find","combination","every","checkTile","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b03c587.chunk.js","sourcesContent":["export default function playerLabel(value) {\n  switch (value) {\n    case 1:\n      return '\\u274C';\n    case 2:\n      return '\\u2B55';\n    default:\n      return '';\n  }\n}\n","export default function backgroundColor(value) {\n  switch (value) {\n    case 1:\n      return 'tile-player1';\n    case 2:\n      return 'tile-player2';\n    default:\n      return 'tile-neutral';\n  }\n}\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nconst FadeTransition = props => (\n  <CSSTransition\n    classNames=\"fade\"\n    timeout={100}\n    {...props}\n    addEndListener={(node, done) => {\n      node.addEventListener('transitionend', done, false);\n    }}\n  />\n);\n\nexport default FadeTransition;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport playerLabel from '../utils/playerLabel';\nimport backgroundColor from '../utils/backgroundColor';\nimport { SwitchTransition } from 'react-transition-group';\nimport FadeTransition from './FadeTransition';\n\nfunction Tile(props) {\n  const { index, value } = props;\n\n  return (\n    <SwitchTransition>\n      <FadeTransition key={value}>\n        <div\n          className={`tile tile${index} ${backgroundColor(value)}`}\n          onClick={() => props.handleClick(index)}>\n          {playerLabel(value)}\n        </div>\n      </FadeTransition>\n    </SwitchTransition>\n  );\n}\n\nTile.propTypes = {\n  index: PropTypes.number,\n  value: PropTypes.number,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tile from './Tile';\n\nfunction renderTiles(tiles, handleClick) {\n  return tiles.map((t, i) => <Tile key={i} index={i} value={t} handleClick={handleClick} />);\n}\n\nfunction GameGrid(props) {\n  return <div className=\"gamegrid\">{renderTiles(props.tiles, props.handleClick)}</div>;\n}\n\nGameGrid.propTypes = {\n  tiles: PropTypes.array.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default GameGrid;\n\n/*\n  <svg className=\"winning-line\">\n    <polyline points=\"12,12 125,125\" stroke=\"red\" strokeWidth={25} />\n  </svg>\n*/\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n  return (\n    <div className=\"header\">\n      <div className=\"container\">\n        <h1 className=\"header__title\">{props.title}</h1>\n        <h3 className=\"header__subtitle\">A browser game by Mr K.</h3>\n      </div>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport backgroundColor from '../utils/backgroundColor';\n\nfunction Message(props) {\n  return <div className={`message ${backgroundColor(props.currentPlayer)}`}>{props.text}</div>;\n}\n\nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  currentPlayer: PropTypes.number.isRequired,\n};\n\nexport default Message;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\nimport backgroundColor from '../utils/backgroundColor';\n\nfunction WinningModal(props) {\n  const { gameState, handleNewGame, message } = props;\n\n  return (\n    <Modal\n      isOpen={gameState !== 0}\n      onRequestClose={handleNewGame}\n      contentLabel=\"Game Over\"\n      className={`modal ${backgroundColor(gameState)}`}\n      closeTimeoutMS={200}\n      ariaHideApp={false}>\n      <h2 className=\"modal__title\">Game Over</h2>\n\n      <p className=\"modal__body\">{message}</p>\n\n      <button className=\"button\" onClick={handleNewGame}>\n        New Game\n      </button>\n    </Modal>\n  );\n}\n\nWinningModal.propTypes = {\n  gameState: PropTypes.number.isRequired,\n  message: PropTypes.string.isRequired,\n};\n\nexport default WinningModal;\n","import React from 'react';\n\nimport GameGrid from './GameGrid';\nimport Header from './Header';\nimport Message from './Message';\nimport WinningModal from './WinningModal';\nimport playerLabel from '../utils/playerLabel'\n\nclass App extends React.Component {\n  defaultState = JSON.stringify({\n    tiles: Array(9).fill(0),\n    currentPlayer: 1,\n    message: `Welcome to the game! It's Player ${playerLabel(1)}'s turn.`,\n    winningCombination: null,\n    moveCounter: 0,\n    gameState: 0,\n  });\n\n  state = JSON.parse(this.defaultState);\n\n  winningCombinations = [\n    // Horizontal\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    // Vertical\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    // Diagonal\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  handleNewGame = () => {\n    this.setState(JSON.parse(this.defaultState));\n  };\n\n  hasWon = () => {\n    const { tiles, currentPlayer } = this.state;\n\n    const winningCombination = this.winningCombinations.find(combination => {\n      return combination.every(index => tiles[index] === currentPlayer);\n    });\n\n    return winningCombination;\n  };\n\n  checkTile = index => {\n    let { moveCounter, currentPlayer, tiles } = this.state;\n\n    if (tiles[index] === 0) {\n      tiles[index] = currentPlayer;\n      moveCounter += 1;\n      const winningCombination = this.hasWon();\n\n      if (winningCombination) {\n        const message = `Congratulations, Player ${playerLabel(currentPlayer)}, you have won!`;\n        const gameState = currentPlayer;\n        this.setState({ gameState, message, moveCounter, winningCombination });\n      } else if (moveCounter === 9) {\n        const message = `Oh dear, it's a tie!`;\n        const gameState = 3;\n        this.setState({ gameState, message, moveCounter });\n      } else {\n        currentPlayer = currentPlayer === 1 ? 2 : 1;\n        const message = `It's Player ${playerLabel(currentPlayer)}'s turn.`;\n        this.setState({ currentPlayer, message, moveCounter, tiles });\n      }\n    }\n  };\n\n  render() {\n    const { currentPlayer, gameState, tiles, message } = this.state;\n\n    return (\n      <div>\n        <Header title=\"Noughts and Crosses\" />\n\n        <div className=\"container\">\n          <Message text={message} currentPlayer={currentPlayer} />\n\n          <GameGrid tiles={tiles} handleClick={this.checkTile} />\n        </div>\n\n        <WinningModal gameState={gameState} message={message} handleNewGame={this.handleNewGame} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'normalize.css/normalize.css';\n\nimport './styles/styles.scss';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}